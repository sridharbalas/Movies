using System;

using Microsoft.Win32;
using System.Xml;

namespace RightPoint
{
    public enum MachineType
    {
        Local,
        Development,
        Qa,
        Stage,
		Integration,
        Preview,
        Production
    }

    /// <summary>
    /// Summary description for Configuration.
    /// </summary>
    public sealed class Configuration
    {
        // If the machine hasn't had the installation utility run on it, then the default prime
        // key for development systems is used.
        private static byte[] _DEVELOPMENT_PRIME_KEY = {
                                                           0x56, 0xB3, 0xEE, 0x0E, 0x0D, 0x3D, 0x2C, 0x2E, 0x37, 0x69, 0x17
                                                           , 0x45, 0x34, 0xF9, 0xEC, 0xB8, 0xE1, 0xBA, 0x38, 0x9A, 0x80,
                                                           0x3C, 0x91, 0x5D, 0x10, 0x06, 0x10, 0x47, 0x18, 0xE1, 0x67, 0xB3
                                                       };

        public static byte[] DEVELOPMENT_PRIME_KEY
        {
            get { return _DEVELOPMENT_PRIME_KEY; }
        }

        #region Local Encryption Key and Confirmation GUID

        public const string LOCAL_GUID = "d626cae6-885f-4234-bdfa-fa8036437f9b";

        private static byte[] _ENCRYPTED_LOCAL_GUID = {
                                                          0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0xF7, 0x13, 0xD1,
                                                          0xB1, 0x6B, 0x4D, 0xC8, 0x29, 0xFB, 0xAC, 0xC3, 0x18, 0x88, 0x25,
                                                          0x09, 0x7A, 0x3B, 0xC0, 0xBC, 0x26, 0x0B, 0x41, 0x57, 0xEC, 0x5B,
                                                          0x90, 0x81, 0xA3, 0xC7, 0x69, 0xE4, 0x5F, 0x80, 0x09, 0x3C, 0xC8,
                                                          0x2C, 0x0E, 0x69, 0x92, 0x2A, 0xCE, 0x2A, 0xE8, 0x86, 0x8B, 0x3C,
                                                          0x60, 0x27, 0x9D, 0x3F, 0x79, 0xD5, 0x6D, 0x42, 0x7D, 0xCF, 0xDD,
                                                          0xB6, 0xBD, 0x2B, 0x6B, 0x12, 0x82, 0x75, 0xE9, 0xFA, 0x0F, 0xDC,
                                                          0xA7, 0x25, 0x69, 0xA7, 0x2F, 0x1F, 0x4C, 0xFF, 0x09, 0x23, 0x83,
                                                          0x79, 0xCA, 0x0C, 0xA2, 0xEB, 0xA7, 0x33, 0x97, 0x41, 0x19, 0xCD,
                                                          0x15, 0x4B, 0x06, 0x9B, 0x7F
                                                      };

        public static byte[] ENCRYPTED_LOCAL_GUID
        {
            get { return _ENCRYPTED_LOCAL_GUID; }
        }

        #endregion

        #region Development Encryption Key and Confirmation GUID

        public const string DEVELOPMENT_GUID = "ecb0d308-3e9a-4626-8921-d63e9e50a3e5";

        private static byte[] _ENCRYPTED_DEVELOPMENT_GUID = {
                                                                0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x75, 0x13,
                                                                0xD1, 0xFE, 0x38, 0x49, 0xB1, 0xC8, 0x29, 0x23, 0xC3, 0x18,
                                                                0x88, 0xAF, 0x28, 0x25, 0xE9, 0x09, 0xB9, 0x68, 0x25, 0xEF,
                                                                0xC4, 0xEB, 0xD0, 0xE3, 0x3B, 0x5A, 0xC0, 0xF6, 0xBC, 0x89,
                                                                0x12, 0x0C, 0x90, 0x41, 0x81, 0xC7, 0xDA, 0x2C, 0x0E, 0x9C,
                                                                0x6C, 0x92, 0x72, 0x2A, 0xFB, 0x31, 0xE8, 0xD2, 0x86, 0x3C,
                                                                0x27, 0xCC, 0xC4, 0x9D, 0xF9, 0x6D, 0x84, 0x7D, 0xDD, 0x85,
                                                                0x75, 0xE9, 0x6B, 0x7D, 0x42, 0x1E, 0x2D, 0xFA, 0x0F, 0xA7,
                                                                0x4C, 0xF2, 0xF7, 0x83, 0x0C, 0x81, 0xA2, 0x8A, 0xE1, 0xB0,
                                                                0x7F, 0xA7, 0xF4, 0x33, 0x97, 0xC3, 0x41, 0x19, 0xCD, 0x15,
                                                                0x4B, 0x06, 0x9B, 0x7F
                                                            };

        public static byte[] ENCRYPTED_DEVELOPMENT_GUID
        {
            get { return _ENCRYPTED_DEVELOPMENT_GUID; }
        }

        #endregion

        #region Qa Encryption Key and Confirmation GUID

        public const string QA_GUID = "5cc4254a-2729-4db8-b07b-55e8d9849b93";

        private static byte[] _ENCRYPTED_QA_GUID = {
                                                       0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x9E, 0x18, 0x0B, 0x5E, 0x95, 0xD5, 0x1A, 0xDE, 0x01, 0x3E, 0xCF, 0x3D, 0x1D, 0x19, 0x51, 0xD9, 0x8D, 0xF5, 0x49, 0xF6, 0x21, 0xDB, 0xD6, 0x79, 0x9A, 0xA6, 0xD5, 0x77, 0x92, 0x61, 0x24, 0x21, 0xF2, 0x19, 0x07, 0x11, 0xBF, 0x96, 0x07, 0x2D, 0x57, 0xB2, 0xC3, 0x1C, 0x53, 0x09, 0x4C, 0xBC, 0x4A, 0x85, 0x3C, 0xE1, 0xD4, 0x93, 0x2E, 0x1E, 0x56, 0xF1, 0x67, 0xCF, 0xF1, 0x2F, 0xD7, 0x46, 0xAC, 0x01, 0x50, 0xA1, 0x07, 0xE3, 0xCE, 0x05, 0x3E, 0xE6, 0xA7, 0x97, 0x38, 0x6C, 0x74, 0xF9, 0x6A, 0x8A, 0x57, 0xD3, 0x5E, 0x1F, 0x3E, 0xED, 0xEB, 0xC6, 0x55, 0xB0, 0xAB, 0xE9, 0x67, 0xCA
                                                   };

        public static byte[] ENCRYPTED_QA_GUID
        {
            get { return _ENCRYPTED_QA_GUID; }
        }

        #endregion

        #region Preview Encryption Key and Confirmation GUID

        public const string PREVIEW_GUID = "7f2aa51f-6819-4767-813a-aa3cf4e4c47a";

        private static byte[] _ENCRYPTED_PREVIEW_GUID = {
                                                            0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0xD3, 0x73, 0x1A, 0xE6, 0x12, 0xA7, 0x8B, 0x5B, 0x8A, 0xF2, 0x73, 0x42, 0xAD, 0x03, 0xE1, 0x91, 0x1C, 0x5B, 0xFC, 0x59, 0xB0, 0x0C, 0x0D, 0xE9, 0xDE, 0xDF, 0xAF, 0x22, 0xC1, 0xBC, 0x42, 0x8D, 0xDA, 0xCD, 0xAE, 0x25, 0xDA, 0x3A, 0x04, 0x8F, 0x9E, 0x32, 0xD7, 0x25, 0xB8, 0xDC, 0x4D, 0xD7, 0xD0, 0xE3, 0x3C, 0x78, 0xA9, 0x7C, 0x52, 0xFD, 0xDF, 0x04, 0x84, 0x30, 0x24, 0x05, 0x5A, 0xD0, 0xB2, 0xBE, 0x64, 0x34, 0x5E, 0x9D, 0x7B, 0x6E, 0xD3, 0x8D, 0xCA, 0x41, 0xF2, 0x51, 0x81, 0x80, 0xAF, 0x09, 0x48, 0xFC, 0x74, 0xB9, 0x57, 0x69, 0x80, 0x59, 0xF0, 0x7D, 0xF8, 0x0D, 0x6F, 0xD0
                                                        };

        public static byte[] ENCRYPTED_PREVIEW_GUID
        {
            get { return _ENCRYPTED_PREVIEW_GUID; }
        }

        #endregion

        #region Stage Encryption Key and Confirmation GUID

        public const string STAGE_GUID = "0a3662ef-40bb-42d1-94f5-56e8ed195571";

        private static byte[] _ENCRYPTED_STAGE_GUID = {
                                                          0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x40, 0xD9, 0xEF, 0xEA, 0x56, 0x4B, 0x10, 0x76, 0x2B, 0x02, 0xC2, 0xD9, 0xAE, 0x68, 0x59, 0x66, 0x50, 0xFB, 0x76, 0xD5, 0x40, 0x68, 0x5B, 0xCC, 0x07, 0x93, 0xCA, 0x45, 0x44, 0x63, 0x64, 0x12, 0x0A, 0xE6, 0x8D, 0x9B, 0x2D, 0xE2, 0x44, 0x32, 0x75, 0xC7, 0x6C, 0xE3, 0x09, 0xA6, 0xD7, 0xF8, 0xF1, 0xF0, 0xD2, 0x88, 0xCF, 0x8D, 0x24, 0xB0, 0x27, 0xE9, 0xCB, 0x16, 0xFE, 0x0B, 0xFD, 0x2A, 0xC7, 0x40, 0x73, 0xD1, 0x08, 0x86, 0x06, 0xA9, 0x5B, 0x2C, 0x48, 0x99, 0x51, 0xA7, 0x48, 0x59, 0xFF, 0x53, 0x00, 0xD6, 0xD9, 0x25, 0x14, 0x34, 0x33, 0xF1, 0x31, 0x53, 0x7F, 0xCE, 0xB0, 0x4D
                                                      };

        public static byte[] ENCRYPTED_STAGE_GUID
        {
            get { return _ENCRYPTED_STAGE_GUID; }
        }

        #endregion

		#region Integration Encryption Key and Confirmation GUID

		public const string INTEGRATION_GUID = "73ff0bb8-8ba3-4aed-803f-8f24add7023e";

		private static byte[] _ENCRYPTED_INTEGRATION_GUID = {
                                                          0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x3E, 0x8D, 0x96, 0x69, 0xD0, 0xE0, 0xBC, 0x4A, 0x67, 0xEC, 0x60, 0xB5, 0x3D, 0x10, 0xB3, 0xCA, 0x17, 0x4D, 0x7A, 0x37, 0xCB, 0xF6, 0xA3, 0x99, 0xDA, 0xF4, 0xBB, 0x29, 0x48, 0xFB, 0x30, 0x2C, 0xA2, 0x1E, 0x66, 0x85, 0x6D, 0xD4, 0x2C, 0x34, 0xD4, 0x81, 0x1E, 0xB2, 0x60, 0xBF, 0x77, 0xE9, 0xFC, 0xB8, 0x52, 0xE8, 0x0F, 0xC1, 0x5A, 0x9C, 0xC2, 0x73, 0x41, 0x76, 0xCC, 0xD6, 0xEC, 0x3E, 0xF6, 0xA6, 0x0A, 0x35, 0xD2, 0x58, 0x5C, 0x6C, 0xE4, 0x15, 0xA2, 0xC5, 0x0F, 0x18, 0xDE, 0xD2, 0xAC, 0x18, 0xA2, 0x81, 0x3C, 0x2A, 0x6D, 0x32, 0xB4, 0xCD, 0x3E, 0xB7, 0x87, 0xDB, 0xC4, 0x62
                                                      };

		public static byte[] ENCRYPTED_INTEGRATION_GUID
		{
			get { return _ENCRYPTED_INTEGRATION_GUID; }
		}

		#endregion

        #region Production Encryption Key and Confirmation GUID

        public const string PRODUCTION_GUID = "8e1eb9db-1dcc-4088-bb91-c60fea588f47";


		//0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0xE0, 0x24, 0xEB, 0x06, 0xC4, 0xB8, 0xAB, 0xA4, 0x12, 0xFA, 0x6D, 0xE6, 0xB2, 0xBA, 0xB8, 0x2E, 0xBC, 0xDB, 0x79, 0xEA, 0x60, 0x1D, 0x83, 0xBF, 0x36, 0xD5, 0xDB, 0x73, 0x4E, 0xE5, 0x17, 0xA6, 0x68, 0xC5, 0x32, 0x05, 0x29, 0xFB, 0x1D, 0xF6, 0xEA, 0xE5, 0xC7, 0xBF, 0x39, 0x35, 0x60, 0xE8, 0x30, 0x8D, 0x3E, 0xF1, 0x83, 0x43, 0x23, 0xF0, 0x19, 0x93, 0xCD, 0x28, 0xB2, 0x47, 0xAC, 0xDD, 0x65, 0x79, 0xB9, 0xBE, 0x3E, 0xC1, 0xCA, 0x06, 0xE8, 0x2A, 0x4A, 0x44, 0x4D, 0xFE, 0x80, 0xE3, 0x1B, 0x34, 0x1B, 0x21, 0xAC, 0x99, 0x48, 0xC2, 0xE8, 0xB0, 0x5C, 0xA8, 0xBE, 0x09, 0x58, 0xE4
		//0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x3E, 0xD2, 0x70, 0x12, 0xA3, 0x29, 0xF9, 0xEE, 0xCB, 0x86, 0xD7, 0xA0, 0x07, 0xCF, 0xC0, 0xC6, 0xD7, 0xC9, 0x44, 0x15, 0xA6, 0xD2, 0x87, 0x5C, 0x8A, 0x65, 0x1D, 0x21, 0x0F, 0x7C, 0xD3, 0x8C, 0x60, 0xC3, 0xD2, 0x92, 0x4D, 0x50, 0x6D, 0x73, 0x06, 0xFB, 0x5F, 0x12, 0xAF, 0x5A, 0xE0, 0xE7, 0x26, 0x35, 0x98, 0xC6, 0xC8, 0xD4, 0x60, 0x41, 0x00, 0x75, 0x33, 0xBA, 0x4F, 0x26, 0x35, 0x39, 0x57, 0x47, 0x88, 0xB4, 0x8E, 0xA5, 0x4F, 0xDE, 0x00, 0xF9, 0x2E, 0x8F, 0xC0, 0x74, 0xFA, 0x18, 0x59, 0x46, 0x27, 0x11, 0x20, 0x81, 0x85, 0x0D, 0xED, 0x61, 0x25, 0x3A, 0xEB, 0xA4, 0x01

        private static byte[] _ENCRYPTED_PRODUCTION_GUID = {
																0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x3E, 0xD2, 0x70, 0x12, 0xA3, 0x29, 0xF9, 0xEE, 0xCB, 0x86, 0xD7, 0xA0, 0x07, 0xCF, 0xC0, 0xC6, 0xD7, 0xC9, 0x44, 0x15, 0xA6, 0xD2, 0x87, 0x5C, 0x8A, 0x65, 0x1D, 0x21, 0x0F, 0x7C, 0xD3, 0x8C, 0x60, 0xC3, 0xD2, 0x92, 0x4D, 0x50, 0x6D, 0x73, 0x06, 0xFB, 0x5F, 0x12, 0xAF, 0x5A, 0xE0, 0xE7, 0x26, 0x35, 0x98, 0xC6, 0xC8, 0xD4, 0x60, 0x41, 0x00, 0x75, 0x33, 0xBA, 0x4F, 0x26, 0x35, 0x39, 0x57, 0x47, 0x88, 0xB4, 0x8E, 0xA5, 0x4F, 0xDE, 0x00, 0xF9, 0x2E, 0x8F, 0xC0, 0x74, 0xFA, 0x18, 0x59, 0x46, 0x27, 0x11, 0x20, 0x81, 0x85, 0x0D, 0xED, 0x61, 0x25, 0x3A, 0xEB, 0xA4, 0x01
                                                           };

        public static byte[] ENCRYPTED_PRODUCTION_GUID
        {
            get { return _ENCRYPTED_PRODUCTION_GUID; }
        }

        #endregion

        #region General Encryption Key for semi-secure encryption

        private static byte[] _PUBLIC_ENCRYPTION_KEY = {
                                                           0xE5, 0x36, 0x63, 0xA0, 0x51, 0x07, 0x93, 0x98, 0xBF, 0xD2, 0x28
                                                           , 0x1A, 0x84, 0xC4, 0xDA, 0x7C, 0xE4, 0x35, 0x52, 0x10, 0xD9,
                                                           0xCF, 0xA7, 0x04, 0x6E, 0xD5, 0xEB, 0x31, 0x90, 0x1B, 0x3A, 0x22
                                                       };

        public static byte[] PUBLIC_ENCRYPTION_KEY
        {
            get { return _PUBLIC_ENCRYPTION_KEY; }
        }

        #endregion

        // Registry key and value constants
        public const string RightPoint_REGISTRY_KEY = "SOFTWARE\\RightPoint";
		public const string RightPoint_64BIT_REGISTRY_KEY = "SOFTWARE\\Wow6432Node\\RightPoint";
        public const string RightPoint_REGISTRY_VALUE_NAME_STRONG_KEY = "encryptedStrongEncryptionKey";
        public const string RightPoint_REGISTRY_VALUE_NAME_MACHINE_TYPE = "encryptedMachineType";

        private Configuration()
        {
        }

        /// <summary>
        /// Defaults to 5 minutes for now.
        /// </summary>
        public static int DefaultCacheExpiration
        {
            get { return 300; }
        }

		public static int DefaultOneHourCacheExpiration
		{
			get { return 3600; }
		}

		public static int DefaultThirtySecondCacheExpiration
		{
			get { return 30; }
		}

        /// <summary>
        /// Gets the type of the machine (development, beta, stage, production) based on the 
        /// configured value stored in the registry. If the framework installation has not been run
        /// then the machine type defaults to development.
        /// </summary>
        private static MachineType _machineType = MachineType.Development;

        private static bool _gotMachineType = false;

        public static MachineType MachineType
        {
            get
            {
                if ( _gotMachineType != true )
                {
                    _machineType = GetMachineType();
                    _gotMachineType = true;
                }

                return _machineType;
            }
			internal set
			{
				_machineType = value;
				_gotMachineType = true;
			}
        }

        /// <summary>
        /// Gets the machine type of the local machine.
        /// </summary>
        /// <returns></returns>
        public static MachineType GetMachineType()
        {
#if DOTNET_STANDARD
            return GetMachineTypeFromEnvironment();
#else
            return GetMachineType( null );
#endif
        }

        public static MachineType GetMachineTypeFromEnvironment()
        {
            string environment;

            environment = System.Environment.GetEnvironmentVariable("EI_ENVIRONMENT");

            if (String.IsNullOrEmpty(environment) == true)
                environment = System.Environment.GetEnvironmentVariable("Environment");

            object machineTypeObject;

            try
            {
                machineTypeObject = Enum.Parse(typeof(MachineType), environment, true);
            }
            catch (ArgumentNullException)
            {
                machineTypeObject = MachineType.Local;
            }
            catch (ArgumentException)
            {
                machineTypeObject = MachineType.Local;
            }

            return (MachineType)machineTypeObject;
        }

        /// <summary>
        /// Gets the machine type of a machine on the network. The user must have administrative rights on the remote server
        /// to use this function.
        /// </summary>
        /// <param name="computerName">The name of the computer to query for machine type. Passing null or a 0 length string to this function will return the machine type of the local machine.</param>
        /// <returns>a MachineType enumeration representing the remote machine's type.</returns>
		/// 
		private static MachineType? _localMachineType;
        public static MachineType GetMachineType( string computerName )
        {
			if (computerName == null && _localMachineType != null)
				return _localMachineType.GetValueOrDefault();

            MachineType machineType = MachineType.Local;

			if (computerName == null)
				_localMachineType = machineType;

            return machineType;
        }

        /// <summary>
        /// Gets the strong encryption key from the registry. This key is used with the encrypted store
        /// business object and is machine type specific in that a different encryption key is 
        /// used with development, beta, stage, and production.
        /// </summary>
        private static byte[] _strongEncryptionKey = null;

        public static byte[] StrongEncryptionKey
        {
            get
            {
                if ( _strongEncryptionKey == null )
                {
                    byte[] encryptedValue =
                        GetEncryptedRegistryValue( null, RightPoint_REGISTRY_VALUE_NAME_STRONG_KEY );

                    if ( encryptedValue == null )
                    {
                        _strongEncryptionKey = DEVELOPMENT_PRIME_KEY;
                    }
                }

                return _strongEncryptionKey;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="computerName">If a computer name is null, then the local machine registry is used.</param>
        /// <param name="valueName"></param>
        /// <returns></returns>
        private static byte[] GetEncryptedRegistryValue( string computerName, string valueName )
        {
            byte[] returnValue = null;

#if !DOTNET_STANDARD
            RegistryKey remoteRegistryKey = null;
            RegistryKey RightPointRegistryKey = null;

            try
            {
                if ( computerName != null && computerName.Length > 0 )
                {
                    remoteRegistryKey = RegistryKey.OpenRemoteBaseKey( RegistryHive.LocalMachine, computerName );

                    if ( remoteRegistryKey != null )
                    {
                        RightPointRegistryKey = remoteRegistryKey.OpenSubKey( RightPoint_REGISTRY_KEY );
                    }
                }
                else
                {
                    RightPointRegistryKey = Registry.LocalMachine.OpenSubKey( RightPoint_REGISTRY_KEY );
                }

                if ( RightPointRegistryKey != null )
                {
                    returnValue = (byte[]) RightPointRegistryKey.GetValue( valueName );
                }
            }
            finally
            {
                if ( RightPointRegistryKey != null )
                {
                    RightPointRegistryKey.Close();
                }

                if ( remoteRegistryKey != null )
                {
                    remoteRegistryKey.Close();
                }
            }
#endif
            return returnValue;
        }


		public static object ReadAttributeValue(XmlNode node, string attributeName)
		{
			XmlAttribute attribute = node.Attributes[attributeName];
			if (attribute == null)
				throw new Exception("Attributue: " + attribute + " was not found under node: " + node.Name + " in the checkoutSettings section.");

			return attribute.Value;
		}

		public static object ReadAttributeValue(XmlNode section, string nodePath, string attributeName)
		{
			XmlNode node = section.SelectSingleNode(nodePath);
			if (node == null)
				throw new Exception("Path: " + nodePath + " was not found in the checkoutSettings section.");

			return ReadAttributeValue(node, attributeName);
		}

    }
}